importar  java.awt. * ;
importar  java.awt.event. * ;


La  clase  pública TorreHanoiV  extiende  Frame  implementa  ActionListener
{ 
	Botón b [] =  nuevo  Botón [ 100 ];
	Botón btnsolu =  nuevo  Botón ( " Resolver " );
	TextField txtdisco =  nuevo  TextField ( 5 );
	Etiqueta lbldisco =  nueva  Etiqueta ( " Ingresa el número de discos (<10): " , Etiqueta . CENTRO );
	int h [] =  new  int [ 4 ];
	int pos [] =  nuevo  int [ 4 ];
	int i, k [] =  new  int [ 50 ];
	int x [] =  nuevo  int [ 4 ];
	int yc;
	int n, xc [] = new  int [ 50 ];
    público  TorreHanoiV ()
    {    	  	 
    	  	 n =  5 ;
        	 yc =  100 ;
       		 xc [ 0 ] =  100 ;
       		 para ( int f = 1 ; f < 50 ; f ++ )
       		 	xc [f] = xc [f - 1 ] -  20 ;
       
	    	tratar
	    	{
		    	setLayout ( nulo );
		        k [ 1 ] = 500 ;
		                  
		         txtdisco . setBounds ( 400 , 400 , 100 , 25 );
		         btnsolu . setBounds ( 510 , 400 , 100 , 30 );
		         lbldisco . setBounds ( 100 , 400 , 290 , 25 );
		         agregar (lbldisco);
		         añadir (btnsolu);
		         agregar (txtdisco);
		         
		         btnsolu . addActionListener ( esto );
		                     
		         b [ 0 ] =  nuevo  botón ( " " + 0 );
		         b [ 0 ] . setBounds (xc [ 0 ], yc, 50 , 20 );
	         
	        }
	        atrapar ( Excepción e)
	        {
	            
	        }
	        setSize ( 1000 , 500 );
	        setTitle ( " Torre de Hanoi " );
	        setVisible ( verdadero );
        
	          addWindowListener (   
	      nuevo  java.awt.event . WindowAdapter ()   
	      {  
                @Anular
	        public  void windowClosing ( java.awt.event . WindowEvent e)   
	        {  
	          Sistema . salir ( 0 );  
	        }  
	      }  
	    );  
    }
    
    public  void  creaVisual ()
    {
    	para (i = 1 ; i <= n; i ++ )
        {
            k [i] = k [i - 1 ] -  10 ;
            xc [i] = ( 300 + 20 + 2 * k [i]) / 2 ;
            b [i] =  nuevo  botón ( " Disco " + i);
            b [i] . setBackground ( Color . AZUL );
            b [i] . setBounds (xc [i], b [i - 1 ] . getY () + 20 , 50 - 2 * k [i], 20 );
            añadir (b [i]);
        }
    }
    
    
             @Anular
    public  void  actionPerformed ( ActionEvent  e )
    {
    	prueba {
		    	if (p . getActionCommand () . equals ( " Resolver " ))
		    	{
		    	
		    		  n =  Entero . parseInt (txtdisco . getText ());
		    		 x [ 1 ] =  000 ;
		         	 x [ 2 ] =  300 ;
		        	 x [ 3 ] =  600 ;
			    	 h [ 1 ] =  0 ;
			         h [ 2 ] = h [ 3 ] = (n) * 20 ;
		    		
		    	     creaVisual ();
		    		 torre (n, 1 , 2 , 3 );
		    		 Hilo . dormir ( 500 );
		    		 para (i = 0 ; i <= n; i ++ )
		    		 	esto . eliminar (b [i]);
                                 esto . txtdisco . setText ( " " );
		    	}
    		
    	}
    	catch ( NumberFormatException  |  InterruptedException f) {}
    }
    
   
    
    public  static  void  main ( String [] args )
    {
    	TorreHanoiV a =  nuevo  TorreHanoiV ();
    }
    public  void  tower ( int  top , int  torreA , int  torreB , int  torreC ) lanza  InterruptedException
    {
         if (top ==  1 ) {
        // verifico que todo corra bien
     	// System.out.println ("Disco" + top + "de" + torreA + "para" + torreC);
     		
    	Hilo . dormir ( 500 );
            b [arriba] . setLocation (xc [arriba] + x [torreC], yc + h [torreC]);
            h [torreC] - = 20 ;
            h [torreA] + = 20 ;
    	}
    else {
      torre (top -  1 , torreA, torreC, torreB);
      // verifico que todo corra bien
      // System.out.println ("Disco" + top + "de" + torreA + "para" + torreC);
    	Hilo . dormir ( 500 );

      	b [arriba] . setLocation (xc [arriba] + x [torreC], yc + h [torreC]);
      	h [torreC] - = 20 ;
     	h [torreA] + = 20 ;
        torre (top -  1 , torreB, torreA, torreC);
      // verifico que todo corra bien
      // System.out.println ("Disco" + top + "de" + torreA + "para" + torreC);
    }
  
    }
}
